clear all
close all
 %Parameters
 populationSize = 100;
 numberOfGenes = 50;
 crossoverProbability = 0.8;
 mutationProbability = 1/numberOfGenes;
 tournamentSelectionParameter = 0.75;
 numberOfGenerations = 10000;
 numberOfCopies = 1;
 tournamentSize = 2; 
 population = InitializePopulation(populationSize, numberOfGenes);
 fitness = zeros(populationSize,1);
 cityLocations = LoadCityLocations();
 nCities = size(cityLocations,1);

tspFigure = InitializeTspPlot(cityLocations,[0 20 0 20]); 
connection = InitializeConnections(cityLocations); 

% main algorithm
 for iGeneration = 1:numberOfGenerations
     maximumFitness = 0.0; % Assumes nonâˆ’negative fitness values!
     xBest = zeros(1,2); % [0 0]
     bestIndividualIndex = 0;
     for i = 1:populationSize
         chromosome = population(i,:);
         fitness(i) = EvaluateIndividual(chromosome);
         if (fitness(i) > maximumFitness)
             maximumFitness = fitness(i);
             bestIndividualIndex = i;

             xBest = chromosome;
         end
     end

     tempPopulation = population;
        %tournament selection
     for i = 1:2:populationSize
         i1 = TournamentSelect(fitness,tournamentSelectionParameter,tournamentSize);
         i2 = TournamentSelect(fitness,tournamentSelectionParameter, tournamentSize);
         tempPopulation(i,:) = population(i1,:);
         tempPopulation(i+1,:) = population(i2,:);
     end
      
        % mutation
     for i = 1:populationSize
         originalChromosome = tempPopulation(i,:);
         mutatedChromosome = Mutate(originalChromosome,...
         mutationProbability);
         tempPopulation(i,:) = mutatedChromosome;
     end

       %elitism
     tempPopulation = InsertBestIndividual(tempPopulation,population(bestIndividualIndex, :),numberOfCopies);
     if (EvaluateIndividual(tempPopulation(1, :)) > EvaluateIndividual(population(1,:)))
         
         PlotPath(connection,cityLocations,tempPopulation(1, :));
         disp(tempPopulation)
     end
         
     population = tempPopulation;
    
    
 end

 
 format long;
 disp('xBest');
 disp(xBest);
 disp('minimalValue');
disp(1/maximumFitness);